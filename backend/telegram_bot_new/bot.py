# NeonCasino Telegram Bot - Optimized Version
import os
import sys
import django
import asyncio
import logging
import json
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from telegram.error import TelegramError, BadRequest, Forbidden, TimedOut

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'neoncasino.settings')
django.setup()

from telegram_bot_new.models import BotSettings, BotNotification, BotUser, AdminCommand
from users.models import User
from kyc.models import KYCVerification
from payments_new.models import Payment
from promo.models import PromoCode, PromoManager, PromoCodeRequest
from django.utils import timezone
from asgiref.sync import sync_to_async
from django.core.cache import cache

# Setup optimized logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('telegram_bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# Cache settings
CACHE_TIMEOUT = 300  # 5 minutes
USER_CACHE_TIMEOUT = 600  # 10 minutes

class NeonCasinoBot:
    def __init__(self):
        self.bot_settings = BotSettings.objects.first()
        if not self.bot_settings or not self.bot_settings.bot_token:
            logger.error("Bot token not configured!")
            sys.exit(1)
        
        self.bot = Bot(token=self.bot_settings.bot_token)
        self.application = Application.builder().token(self.bot_settings.bot_token).build()
        
        # Initialize cache
        self._init_cache()
        
        # Add handlers with error handling
        self._setup_handlers()
        
        logger.info("NeonCasino Bot initialized successfully")
    
    def _init_cache(self):
        """Initialize cache with default values"""
        cache.set('bot_stats', {}, CACHE_TIMEOUT)
        cache.set('user_permissions', {}, USER_CACHE_TIMEOUT)
    
    def _setup_handlers(self):
        """Setup all command handlers with error handling"""
        handlers = [
            CommandHandler("start", self._handle_with_error(self.start_command)),
            CommandHandler("help", self._handle_with_error(self.help_command)),
            CommandHandler("status", self._handle_with_error(self.status_command)),
            CommandHandler("users", self._handle_with_error(self.users_command)),
            CommandHandler("payments", self._handle_with_error(self.payments_command)),
            CommandHandler("kyc", self._handle_with_error(self.kyc_command)),
            CommandHandler("create_promo", self._handle_with_error(self.create_promo_command)),
            CommandHandler("list_promos", self._handle_with_error(self.list_promos_command)),
            CommandHandler("promo_stats", self._handle_with_error(self.promo_stats_command)),
            CommandHandler("promote_user", self._handle_with_error(self.promote_user_command)),
            CommandHandler("demote_user", self._handle_with_error(self.demote_user_command)),
            CommandHandler("ban_user", self._handle_with_error(self.ban_user_command)),
            CommandHandler("unban_user", self._handle_with_error(self.unban_user_command)),
            CommandHandler("set_manager_chat", self._handle_with_error(self.set_manager_chat_command)),
            CommandHandler("show_settings", self._handle_with_error(self.show_settings_command)),
            CommandHandler("test_notifications", self._handle_with_error(self.test_notifications_command)),
            CommandHandler("get_user_id", self._handle_with_error(self.get_user_id_command)),
            CommandHandler("list_bot_users", self._handle_with_error(self.list_bot_users_command)),
            CommandHandler("user_detail", self._handle_with_error(self.user_detail_command)),
            CommandHandler("delete_promo", self._handle_with_error(self.delete_promo_command)),
            CommandHandler("view_promo", self._handle_with_error(self.view_promo_command)),
            MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_with_error(self.handle_text_message)),
            CallbackQueryHandler(self._handle_with_error(self.button_callback)),
            MessageHandler(filters.ChatType.GROUPS & filters.COMMAND, self._handle_with_error(self.handle_group_command))
        ]
        
        for handler in handlers:
            self.application.add_handler(handler)
    
    async def _handle_with_error(self, func):
        """Decorator for error handling in handlers"""
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
            try:
                await func(update, context)
            except BadRequest as e:
                logger.error(f"BadRequest error in {func.__name__}: {e}")
                if update.effective_message:
                    await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã.")
            except Forbidden as e:
                logger.error(f"Forbidden error in {func.__name__}: {e}")
                if update.effective_message:
                    await update.effective_message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            except TimedOut as e:
                logger.error(f"Timeout error in {func.__name__}: {e}")
                if update.effective_message:
                    await update.effective_message.reply_text("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except Exception as e:
                logger.error(f"Unexpected error in {func.__name__}: {e}")
                if update.effective_message:
                    await update.effective_message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return wrapper
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
        user = update.effective_user
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
        bot_user = await self.get_or_create_bot_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        is_admin = await self.check_admin_permissions(user.id)
        is_manager = await self.check_manager_permissions(user.id)
        is_main_admin = await self.check_main_admin_permissions(user.id)
        
        if is_main_admin:
            await update.message.reply_html(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
                "ü§ñ –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è NeonCasino.\n"
                "üëë –í—ã - –ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
                "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
                "/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "/payments - –ü–ª–∞—Ç–µ–∂–∏\n"
                "/kyc - KYC –∑–∞—è–≤–∫–∏\n"
                "/create_promo - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
                "/list_promos - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n"
                "/promo_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n"
                "/promote_user - –ü–æ–≤—ã—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/demote_user - –ü–æ–Ω–∏–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/ban_user - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/unban_user - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/set_manager_chat - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤\n"
                "/show_settings - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                "/test_notifications - –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
                "/help - –ü–æ–º–æ—â—å"
            )
        elif is_admin:
            await update.message.reply_html(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
                "ü§ñ –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è NeonCasino.\n"
                "üë®‚Äçüíº –í—ã - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
                "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
                "/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "/payments - –ü–ª–∞—Ç–µ–∂–∏\n"
                "/kyc - KYC –∑–∞—è–≤–∫–∏\n"
                "/create_promo - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
                "/list_promos - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n"
                "/promo_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n"
                "/ban_user - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/unban_user - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/help - –ü–æ–º–æ—â—å"
            )
        elif is_manager:
            await update.message.reply_html(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
                "ü§ñ –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ NeonCasino.\n\n"
                "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/create_promo - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
                "/list_promos - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n"
                "/promo_stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "/help - –ü–æ–º–æ—â—å"
            )
        else:
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ NeonCasino."
            )
    
    async def create_promo_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start promo code creation process"""
        user = update.effective_user
        
        # Check permissions (managers can create promos)
        is_manager = await self.check_manager_permissions(user.id)
        
        if not is_manager:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")
            return
        
        # Store user state for promo creation
        context.user_data['creating_promo'] = True
        context.user_data['promo_data'] = {}
        
        await update.message.reply_text(
            "üéØ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "–ö–æ–¥: PROMO123\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å\n"
            "–û–ø–∏—Å–∞–Ω–∏–µ: –ë–æ–Ω—É—Å –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "–¢–∏–ø: WELCOME\n"
            "–ë–æ–Ω—É—Å: 1000\n"
            "–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: 100\n"
            "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–Ω–µ–π: 30\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text messages for promo creation"""
        if not context.user_data.get('creating_promo'):
            return
        
        text = update.message.text.strip()
        
        if text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '—Å—Ç–æ–ø']:
            context.user_data['creating_promo'] = False
            context.user_data['promo_data'] = {}
            await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return
        
        try:
            # Parse promo data
            promo_data = self.parse_promo_text(text)
            
            if promo_data:
                # Create promo code
                promo_code = await self.create_promo_code(update.effective_user, promo_data)
                
                if promo_code:
                    # Notify admin chat
                    await self.notify_admin_promo_created(promo_code, update.effective_user)
                    
                    # Notify manager chat
                    await self.notify_manager_promo_created(promo_code, update.effective_user)
                    
                    await update.message.reply_text(
                        f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {promo_code.code} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {promo_code.name}\n"
                        f"–ë–æ–Ω—É—Å: {promo_code.bonus_amount} NC\n"
                        f"–°—Ç–∞—Ç—É—Å: {promo_code.status}"
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.")
                
                # Reset state
                context.user_data['creating_promo'] = False
                context.user_data['promo_data'] = {}
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç."
                )
                
        except Exception as e:
            logger.error(f"Error creating promo code: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            context.user_data['creating_promo'] = False
            context.user_data['promo_data'] = {}
    
    def parse_promo_text(self, text):
        """Parse promo code data from text"""
        try:
            lines = text.split('\n')
            promo_data = {}
            
            for line in lines:
                if ':' in line:
                    key, value = line.split(':', 1)
                    key = key.strip().lower()
                    value = value.strip()
                    
                    if key == '–∫–æ–¥':
                        promo_data['code'] = value.upper()
                    elif key == '–Ω–∞–∑–≤–∞–Ω–∏–µ':
                        promo_data['name'] = value
                    elif key == '–æ–ø–∏—Å–∞–Ω–∏–µ':
                        promo_data['description'] = value
                    elif key == '—Ç–∏–ø':
                        promo_data['promo_type'] = value.upper()
                    elif key == '–±–æ–Ω—É—Å':
                        promo_data['bonus_amount'] = float(value)
                    elif key == '–º–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π':
                        promo_data['max_uses'] = int(value)
                    elif key == '–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–Ω–µ–π':
                        promo_data['valid_days'] = int(value)
            
            # Validate required fields
            required_fields = ['code', 'name', 'description', 'promo_type', 'bonus_amount']
            if all(field in promo_data for field in required_fields):
                return promo_data
            
            return None
            
        except Exception as e:
            logger.error(f"Error parsing promo text: {e}")
            return None
    
    async def create_promo_code(self, user, promo_data):
        """Create promo code in database"""
        try:
            from django.utils import timezone
            from datetime import timedelta
            
            # Get user object
            user_obj = await sync_to_async(User.objects.get)(telegram_id=user.id)
            
            promo_code = PromoCode.objects.create(
                code=promo_data['code'],
                name=promo_data['name'],
                description=promo_data['description'],
                promo_type=promo_data['promo_type'],
                bonus_amount=promo_data['bonus_amount'],
                max_uses=promo_data.get('max_uses', 1),
                valid_from=timezone.now(),
                valid_until=timezone.now() + timedelta(days=promo_data.get('valid_days', 30)),
                status='ACTIVE',
                is_active=True,
                created_by=user_obj
            )
            
            # Update manager stats if user is a manager
            try:
                manager = await sync_to_async(PromoManager.objects.get)(user=user_obj)
                manager.total_promos_created += 1
                await sync_to_async(manager.save)()
            except PromoManager.DoesNotExist:
                pass  # User is not a manager
            
            return promo_code
            
        except Exception as e:
            logger.error(f"Error creating promo code: {e}")
            return None
    
    async def notify_admin_promo_created(self, promo_code, creator):
        """Notify admin chat about new promo code"""
        try:
            admin_chat_id = self.bot_settings.admin_chat_id
            if admin_chat_id:
                message = (
                    f"üéØ –ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"–ö–æ–¥: {promo_code.code}\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {promo_code.name}\n"
                    f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {creator.username or creator.first_name}\n"
                    f"–ë–æ–Ω—É—Å: {promo_code.bonus_amount} NC\n"
                    f"–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promo_code.max_uses}\n"
                    f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {promo_code.valid_until.strftime('%d.%m.%Y')}"
                )
                
                await self.bot.send_message(chat_id=admin_chat_id, text=message)
                
        except Exception as e:
            logger.error(f"Error notifying admin: {e}")
    
    async def notify_manager_promo_created(self, promo_code, creator):
        """Notify manager chat about new promo code"""
        try:
            manager_chat_id = self.bot_settings.managers_chat_id
            if manager_chat_id:
                message = (
                    f"üéØ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"–ö–æ–¥: {promo_code.code}\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {promo_code.name}\n"
                    f"–ë–æ–Ω—É—Å: {promo_code.bonus_amount} NC\n"
                    f"–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promo_code.max_uses}\n"
                    f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {promo_code.valid_until.strftime('%d.%m.%Y')}"
                )
                
                await self.bot.send_message(chat_id=manager_chat_id, text=message)
                
        except Exception as e:
            logger.error(f"Error notifying manager: {e}")
    
    async def get_or_create_bot_user(self, user_id: int, username: str = None, first_name: str = None, last_name: str = None) -> BotUser:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"bot_user_{user_id}"
        cached_user = cache.get(cache_key)
        
        if cached_user:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (cached_user.get('username') != username or 
                cached_user.get('first_name') != first_name or 
                cached_user.get('last_name') != last_name):
                
                try:
                    bot_user = await sync_to_async(BotUser.objects.get)(user_id=user_id)
                    bot_user.username = username
                    bot_user.first_name = first_name
                    bot_user.last_name = last_name
                    await sync_to_async(bot_user.save)()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                    cache.set(cache_key, {
                        'id': bot_user.id,
                        'user_id': bot_user.user_id,
                        'username': bot_user.username,
                        'first_name': bot_user.first_name,
                        'last_name': bot_user.last_name,
                        'level': bot_user.level,
                        'is_active': bot_user.is_active,
                        'is_banned': bot_user.is_banned
                    }, USER_CACHE_TIMEOUT)
                    
                    return bot_user
                except BotUser.DoesNotExist:
                    pass
        
        try:
            bot_user = await sync_to_async(BotUser.objects.get)(user_id=user_id)
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            bot_user.username = username
            bot_user.first_name = first_name
            bot_user.last_name = last_name
            await sync_to_async(bot_user.save)()
            
            # –ö—ç—à–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cache.set(cache_key, {
                'id': bot_user.id,
                'user_id': bot_user.user_id,
                'username': bot_user.username,
                'first_name': bot_user.first_name,
                'last_name': bot_user.last_name,
                'level': bot_user.level,
                'is_active': bot_user.is_active,
                'is_banned': bot_user.is_banned
            }, USER_CACHE_TIMEOUT)
            
            return bot_user
        except BotUser.DoesNotExist:
            bot_user = await sync_to_async(BotUser.objects.create)(
                user_id=user_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                level='user'
            )
            
            # –ö—ç—à–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cache.set(cache_key, {
                'id': bot_user.id,
                'user_id': bot_user.user_id,
                'username': bot_user.username,
                'first_name': bot_user.first_name,
                'last_name': bot_user.last_name,
                'level': bot_user.level,
                'is_active': bot_user.is_active,
                'is_banned': bot_user.is_banned
            }, USER_CACHE_TIMEOUT)
            
            return bot_user

    async def check_admin_permissions(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"admin_permissions_{user_id}"
        cached_permission = cache.get(cache_key)
        
        if cached_permission is not None:
            return cached_permission
        
        try:
            bot_user = await sync_to_async(BotUser.objects.get)(user_id=user_id)
            is_admin = bot_user.level in ['main_admin', 'admin'] and bot_user.is_active and not bot_user.is_banned
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            cache.set(cache_key, is_admin, USER_CACHE_TIMEOUT)
            return is_admin
        except BotUser.DoesNotExist:
            cache.set(cache_key, False, USER_CACHE_TIMEOUT)
            return False

    async def check_main_admin_permissions(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"main_admin_permissions_{user_id}"
        cached_permission = cache.get(cache_key)
        
        if cached_permission is not None:
            return cached_permission
        
        try:
            bot_user = await sync_to_async(BotUser.objects.get)(user_id=user_id)
            is_main_admin = bot_user.level == 'main_admin' and bot_user.is_active and not bot_user.is_banned
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            cache.set(cache_key, is_main_admin, USER_CACHE_TIMEOUT)
            return is_main_admin
        except BotUser.DoesNotExist:
            cache.set(cache_key, False, USER_CACHE_TIMEOUT)
            return False

    async def check_manager_permissions(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏–ª–∏ –≤—ã—à–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"manager_permissions_{user_id}"
        cached_permission = cache.get(cache_key)
        
        if cached_permission is not None:
            return cached_permission
        
        try:
            bot_user = await sync_to_async(BotUser.objects.get)(user_id=user_id)
            is_manager = bot_user.level in ['main_admin', 'admin', 'manager'] and bot_user.is_active and not bot_user.is_banned
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            cache.set(cache_key, is_manager, USER_CACHE_TIMEOUT)
            return is_manager
        except BotUser.DoesNotExist:
            cache.set(cache_key, False, USER_CACHE_TIMEOUT)
            return False
    
    def _clear_user_cache(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤"""
        cache_keys = [
            f"bot_user_{user_id}",
            f"admin_permissions_{user_id}",
            f"main_admin_permissions_{user_id}",
            f"manager_permissions_{user_id}"
        ]
        for key in cache_keys:
            cache.delete(key)
    
    async def list_promos_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """List promo codes for user"""
        user = update.effective_user
        
        # Check permissions
        is_admin = await self.check_admin_permissions(user.id)
        is_manager = await self.check_manager_permissions(user.id)
        
        if not (is_admin or is_manager):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")
            return
        
        try:
            if is_admin:
                # Admin sees all promo codes
                promo_codes = await sync_to_async(PromoCode.objects.all)()
                message = "üìã –í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n\n"
            else:
                # Manager sees only their promo codes
                user_obj = await sync_to_async(User.objects.get)(telegram_id=user.id)
                promo_codes = await sync_to_async(PromoCode.objects.filter)(created_by=user_obj)
                message = "üìã –í–∞—à–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n\n"
            
            if not promo_codes:
                message += "–ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            else:
                for promo in promo_codes[:10]:  # Limit to 10 for readability
                    message += f"üéØ {promo.code} - {promo.name}\n"
                    message += f"   –°—Ç–∞—Ç—É—Å: {promo.status}\n"
                    message += f"   –ë–æ–Ω—É—Å: {promo.bonus_amount} NC\n"
                    message += f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promo.current_uses}/{promo.max_uses}\n\n"
                
                if len(promo_codes) > 10:
                    message += f"... –∏ –µ—â–µ {len(promo_codes) - 10} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"Error listing promos: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")
    
    async def promo_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show promo code statistics"""
        user = update.effective_user
        
        # Check permissions
        is_admin = await self.check_admin_permissions(user.id)
        is_manager = await self.check_manager_permissions(user.id)
        
        if not (is_admin or is_manager):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return
        
        try:
            if is_admin:
                # Admin sees global stats
                total_promos = await sync_to_async(PromoCode.objects.count)()
                active_promos = await sync_to_async(PromoCode.objects.filter(status='ACTIVE').count)()
                total_redemptions = await sync_to_async(PromoRedemption.objects.count)()
                
                message = "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:\n\n"
                message += f"–í—Å–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {total_promos}\n"
                message += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_promos}\n"
                message += f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {total_redemptions}\n"
            else:
                # Manager sees their stats
                user_obj = await sync_to_async(User.objects.get)(telegram_id=user.id)
                manager = await sync_to_async(PromoManager.objects.get)(user=user_obj)
                
                message = f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                message += f"–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {manager.total_promos_created}\n"
                message += f"–ü—Ä–∏–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {manager.total_users_referred}\n"
                message += f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–æ—Ö–æ–¥–æ–≤: {manager.total_revenue_generated} NC\n"
                message += f"–ö–æ–º–∏—Å—Å–∏—è: {manager.commission_rate}%\n"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"Error getting promo stats: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show help information"""
        user = update.effective_user
        
        # Check if user is admin or manager
        is_admin = await self.check_admin_permissions(user.id)
        is_manager = await self.check_manager_permissions(user.id)
        
        if is_admin:
            help_text = (
                "ü§ñ **–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º NeonCasino Bot**\n\n"
                "**üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
                "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
                "/show_settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
                "**üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:**\n"
                "/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "/list_bot_users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ (–∞–¥–º–∏–Ω—ã/–º–µ–Ω–µ–¥–∂–µ—Ä—ã)\n"
                "/user_detail <user_id> - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
                "/get_user_id @username - –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/payments - –ü–ª–∞—Ç–µ–∂–∏\n"
                "/kyc - KYC –∑–∞—è–≤–∫–∏\n\n"
                "**üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:**\n"
                "/create_promo - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
                "/list_promos - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n"
                "/view_promo <–∫–æ–¥> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ\n"
                "/delete_promo <–∫–æ–¥> - –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
                "/promo_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n"
                "/set_manager_chat - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤\n"
                "/test_notifications - –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
                "**üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–®–ê–ì –ó–ê –®–ê–ì–û–ú):**\n\n"
                "**–®–∞–≥ 1:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_promo\n\n"
                "**–®–∞–≥ 2:** –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "```\n"
                "–ö–æ–¥: WELCOME2024\n"
                "–ù–∞–∑–≤–∞–Ω–∏–µ: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å 2024\n"
                "–û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–ª—É—á–∏—Ç–µ 1000 NC –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
                "–¢–∏–ø: WELCOME\n"
                "–ë–æ–Ω—É—Å: 1000\n"
                "–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: 1000\n"
                "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–Ω–µ–π: 30\n"
                "```\n\n"
                "**üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:**\n"
                "‚Ä¢ WELCOME - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å\n"
                "‚Ä¢ DEPOSIT - –ë–æ–Ω—É—Å –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç\n"
                "‚Ä¢ RELOAD - –ë–æ–Ω—É—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç\n"
                "‚Ä¢ FREE_SPINS - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤—Ä–∞—â–µ–Ω–∏—è\n"
                "‚Ä¢ CASHBACK - –ö—ç—à–±—ç–∫\n\n"
                "**üí° –í–∞–∂–Ω–æ:**\n"
                "‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω —Å—Ä–∞–∑—É\n"
                "‚Ä¢ –í—Å–µ –∞–¥–º–∏–Ω—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã\n"
                "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –∞–¥–º–∏–Ω –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —á–∞—Ç—ã"
            )
        elif is_manager:
            help_text = (
                "ü§ñ **–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤**\n\n"
                "**üìä –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                "**üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:**\n"
                "/create_promo - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
                "/list_promos - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n"
                "/promo_stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                "**üîç –ü–æ–∏—Å–∫:**\n"
                "/get_user_id @username - –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
                "**üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–®–ê–ì –ó–ê –®–ê–ì–û–ú):**\n\n"
                "**–®–∞–≥ 1:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_promo\n\n"
                "**–®–∞–≥ 2:** –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "```\n"
                "–ö–æ–¥: SUMMER2024\n"
                "–ù–∞–∑–≤–∞–Ω–∏–µ: –õ–µ—Ç–Ω–∏–π –±–æ–Ω—É—Å\n"
                "–û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–ª—É—á–∏—Ç–µ 500 NC –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
                "–¢–∏–ø: WELCOME\n"
                "–ë–æ–Ω—É—Å: 500\n"
                "–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: 500\n"
                "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–Ω–µ–π: 60\n"
                "```\n\n"
                "**üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:**\n"
                "‚Ä¢ WELCOME - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å\n"
                "‚Ä¢ DEPOSIT - –ë–æ–Ω—É—Å –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç\n"
                "‚Ä¢ RELOAD - –ë–æ–Ω—É—Å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç\n\n"
                "**üí° –°–æ–≤–µ—Ç—ã:**\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã\n"
                "‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ —Ä–∞–∑—É–º–Ω—ã–µ –ª–∏–º–∏—Ç—ã\n"
                "‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ —É—Å–ª–æ–≤–∏—è —á–µ—Ç–∫–æ\n"
                "‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è"
            )
        else:
            help_text = (
                "ü§ñ **NeonCasino Bot**\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ NeonCasino.\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã."
            )
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show system status"""
        user = update.effective_user
        
        # Check permissions
        is_admin = await self.check_admin_permissions(user.id)
        if not is_admin:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã.")
            return
        
        try:
            # Get basic system stats
            total_users = await sync_to_async(User.objects.count)()
            total_payments = await sync_to_async(Payment.objects.count)()
            total_promos = await sync_to_async(PromoCode.objects.count)()
            
            message = "üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã NeonCasino**\n\n"
            message += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            message += f"üí≥ –ü–ª–∞—Ç–µ–∂–µ–π: {total_payments}\n"
            message += f"üéØ –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤: {total_promos}\n"
            message += f"ü§ñ –ë–æ—Ç: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if self.bot_settings.is_active else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
            message += f"üëë –ê–¥–º–∏–Ω —á–∞—Ç: {'üü¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if self.bot_settings.admin_chat_id else 'üî¥ –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
            message += f"üë• –ß–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {'üü¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if self.bot_settings.managers_chat_id else 'üî¥ –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n\n"
            message += "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error getting system status: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
    
    async def users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show users list"""
        user = update.effective_user
        
        # Check permissions
        is_admin = await self.check_admin_permissions(user.id)
        if not is_admin:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        try:
            # Get recent users
            recent_users = await sync_to_async(User.objects.order_by('-date_joined')[:5])
            
            message = "üë• **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n\n"
            
            if recent_users:
                for user_obj in recent_users:
                    message += f"üë§ **{user_obj.username or user_obj.email}**\n"
                    message += f"   üìß {user_obj.email}\n"
                    message += f"   üìÖ {user_obj.date_joined.strftime('%d.%m.%Y')}\n"
                    message += f"   ‚úÖ {'–ê–∫—Ç–∏–≤–µ–Ω' if user_obj.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
            else:
                message += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error getting users: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
    
    async def payments_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show recent payments"""
        user = update.effective_user
        
        # Check permissions
        is_admin = await self.check_admin_permissions(user.id)
        if not is_admin:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏.")
            return
        
        try:
            # Get recent payments
            recent_payments = await sync_to_async(Payment.objects.order_by('-created_at')[:5])
            
            message = "üí≥ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:**\n\n"
            
            if recent_payments:
                for payment in recent_payments:
                    message += f"üí∞ **{payment.amount} {payment.currency}**\n"
                    message += f"   üë§ {payment.user.username or payment.user.email}\n"
                    message += f"   üìä {payment.get_status_display()}\n"
                    message += f"   üìÖ {payment.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            else:
                message += "–ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error getting payments: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {str(e)}")
    
    async def kyc_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show KYC verifications"""
        user = update.effective_user
        
        # Check permissions
        is_admin = await self.check_admin_permissions(user.id)
        if not is_admin:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å KYC –∑–∞—è–≤–∫–∏.")
            return
        
        try:
            # Get recent KYC verifications
            recent_kyc = await sync_to_async(KYCVerification.objects.order_by('-created_at')[:5])
            
            message = "üÜî **–ü–æ—Å–ª–µ–¥–Ω–∏–µ KYC –∑–∞—è–≤–∫–∏:**\n\n"
            
            if recent_kyc:
                for kyc in recent_kyc:
                    message += f"üë§ **{kyc.user.username or kyc.user.email}**\n"
                    message += f"   üìä –°—Ç–∞—Ç—É—Å: {kyc.get_status_display()}\n"
                    message += f"   üìÖ {kyc.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            else:
                message += "KYC –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error getting KYC: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ KYC –∑–∞—è–≤–æ–∫: {str(e)}")
    
    async def set_manager_chat_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Set manager chat ID for notifications"""
        user = update.effective_user
        
        # Only admins can set manager chat
        is_admin = await self.check_admin_permissions(user.id)
        if not is_admin:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
            return
        
        # Check if chat ID is provided
        if not context.args:
            await update.message.reply_text(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_manager_chat <chat_id>\n\n"
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å chat_id:\n"
                "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤\n"
                "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É\n"
                "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_manager_chat —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º chat_id"
            )
            return
        
        try:
            chat_id = context.args[0]
            
            # Validate chat_id format (should be a number or start with -)
            if not (chat_id.isdigit() or (chat_id.startswith('-') and chat_id[1:].isdigit())):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç chat_id. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return
            
            # Update bot settings
            self.bot_settings.managers_chat_id = chat_id
            await sync_to_async(self.bot_settings.save)()
            
            await update.message.reply_text(
                f"‚úÖ –ß–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                f"Chat ID: {chat_id}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç —á–∞—Ç."
            )
            
            # Test message to manager chat
            try:
                test_message = (
                    "üéØ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n"
                    "–ß–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö."
                )
                await self.bot.send_message(chat_id=chat_id, text=test_message)
                await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
            except Exception as e:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ß–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."
                )
                
        except Exception as e:
            logger.error(f"Error setting manager chat: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —á–∞—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {str(e)}")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle button callbacks"""
        query = update.callback_query
        await query.answer()
        
        # Handle different button types
        if query.data.startswith('promo_'):
            await self.handle_promo_callback(query, context)
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    async def handle_promo_callback(self, query, context):
        """Handle promo-related button callbacks"""
        try:
            if query.data == 'promo_create':
                await self.create_promo_command(update=query, context=context)
            elif query.data == 'promo_list':
                await self.list_promos_command(update=query, context=context)
            elif query.data == 'promo_stats':
                await self.promo_stats_command(update=query, context=context)
            else:
                await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
        except Exception as e:
            logger.error(f"Error handling promo callback: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
    
    async def show_settings_command(self, update: Update, context:ContextTypes.DEFAULT_TYPE):
        """Show current bot settings"""
        user = update.effective_user
        
        # Only admins can view settings
        is_admin = await self.check_admin_permissions(user.id)
        if not is_admin:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.")
            return
        
        try:
            settings = self.bot_settings
            
            message = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n"
            message += f"ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if settings.is_active else '–ù–µ—Ç'}\n"
            message += f"üëë –ê–¥–º–∏–Ω —á–∞—Ç: {settings.admin_chat_id}\n"
            message += f"üë• –ß–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {settings.managers_chat_id or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
            message += f"üìÖ –°–æ–∑–¥–∞–Ω: {settings.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            message += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {settings.updated_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            
            if settings.managers_chat_id:
                message += "‚úÖ –ß–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è"
            else:
                message += "‚ö†Ô∏è –ß–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_manager_chat"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"Error showing settings: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
    
    async def test_notifications_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Test notifications for admins"""
        user = update.effective_user
        
        # Only admins can test notifications
        is_admin = await self.check_admin_permissions(user.id)
        if not is_admin:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            return
        
        try:
            # Test admin notification
            await self.notify_admin_user_registered(
                username="test_user",
                email="test@example.com",
                promo_code="TEST123",
                manager_name="Test Manager"
            )
            
            await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            
        except Exception as e:
            logger.error(f"Error testing notifications: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
    
    async def notify_admin_user_registered(self, username, email, promo_code=None, manager_name=None):
        """Notify admin chat about new user registration"""
        try:
            admin_chat_id = self.bot_settings.admin_chat_id
            if admin_chat_id:
                message = (
                    f"üë§ <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                    f"<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}\n"
                    f"<b>üìß Email:</b> {email}\n"
                    f"<b>üìÖ –í—Ä–µ–º—è:</b> {timezone.now().strftime('%d.%m.%Y %H:%M')}\n"
                )
                
                if promo_code:
                    message += f"<b>üéØ –ü—Ä–æ–º–æ–∫–æ–¥:</b> {promo_code}\n"
                    if manager_name:
                        message += f"<b>üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä:</b> {manager_name if manager_name.startswith('@') else f'@{manager_name}'}\n"
                
                await self.bot.send_message(chat_id=admin_chat_id, text=message, parse_mode='HTML')
                
        except Exception as e:
            logger.error(f"Error notifying admin about user registration: {e}")
    
    async def notify_manager_user_registered(self, username, email, promo_code, manager_name):
        """Notify manager chat about new user with their promo code"""
        try:
            manager_chat_id = self.bot_settings.managers_chat_id
            if manager_chat_id:
                message = (
                    f"üéØ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥!</b>\n\n"
                    f"<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}\n"
                    f"<b>üìß Email:</b> {email}\n"
                    f"<b>üéØ –ü—Ä–æ–º–æ–∫–æ–¥:</b> {promo_code}\n"
                    f"<b>üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä:</b> {manager_name if manager_name.startswith('@') else f'@{manager_name}'}\n"
                    f"<b>üìÖ –í—Ä–µ–º—è:</b> {timezone.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ."
                )
                
                await self.bot.send_message(chat_id=manager_chat_id, text=message, parse_mode='HTML')
                
        except Exception as e:
            logger.error(f"Error notifying manager about user registration: {e}")
    
    async def notify_admin_promo_activated(self, username, email, promo_code, manager_name):
        """Notify admin chat about promo code activation by existing user"""
        try:
            admin_chat_id = self.bot_settings.admin_chat_id
            if admin_chat_id:
                message = (
                    f"üéØ <b>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥!</b>\n\n"
                    f"<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}\n"
                    f"<b>üìß Email:</b> {email}\n"
                    f"<b>üéØ –ü—Ä–æ–º–æ–∫–æ–¥:</b> {promo_code}\n"
                    f"<b>üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä:</b> {manager_name if manager_name.startswith('@') else f'@{manager_name}'}\n"
                    f"<b>üìÖ –í—Ä–µ–º—è:</b> {timezone.now().strftime('%d.%m.%Y %H:%M')}\n"
                )
                
                await self.bot.send_message(chat_id=admin_chat_id, text=message, parse_mode='HTML')
                
        except Exception as e:
            logger.error(f"Error notifying admin about promo activation: {e}")
    
    async def notify_manager_promo_activated(self, username, email, promo_code, manager_name):
        """Notify manager chat about promo code activation by existing user"""
        try:
            manager_chat_id = self.bot_settings.managers_chat_id
            if manager_chat_id:
                message = (
                    f"üéØ <b>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥!</b>\n\n"
                    f"<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {username}\n"
                    f"<b>üìß Email:</b> {email}\n"
                    f"<b>üéØ –ü—Ä–æ–º–æ–∫–æ–¥:</b> {promo_code}\n"
                    f"<b>üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä:</b> {manager_name if manager_name.startswith('@') else f'@{manager_name}'}\n"
                    f"<b>üìÖ –í—Ä–µ–º—è:</b> {timezone.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥!"
                )
                
                await self.bot.send_message(chat_id=manager_chat_id, text=message, parse_mode='HTML')
                
        except Exception as e:
            logger.error(f"Error notifying manager about promo activation: {e}")
    
    async def promote_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)"""
        user = update.effective_user
        
        if not await self.check_main_admin_permissions(user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promote_user <user_id> <level>\n"
                "–£—Ä–æ–≤–Ω–∏: main_admin, admin, manager\n"
                "–ü—Ä–∏–º–µ—Ä: /promote_user 123456789 admin"
            )
            return
        
        try:
            target_user_id = int(context.args[0])
            new_level = context.args[1]
            
            if new_level not in ['main_admin', 'admin', 'manager']:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: main_admin, admin, manager")
                return
            
            target_user = await sync_to_async(BotUser.objects.get)(user_id=target_user_id)
            old_level = target_user.level
            target_user.level = new_level
            target_user.promoted_by = await sync_to_async(BotUser.objects.get)(user_id=user.id)
            await sync_to_async(target_user.save)()
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self._clear_user_cache(target_user_id)
            
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.first_name or target_user.username} –ø–æ–≤—ã—à–µ–Ω!\n"
                f"–°—Ç–∞—Ä—ã–π —É—Ä–æ–≤–µ–Ω—å: {old_level}\n"
                f"–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {new_level}"
            )
            
        except BotUser.DoesNotExist:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def demote_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–Ω–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)"""
        user = update.effective_user
        
        if not await self.check_main_admin_permissions(user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /demote_user <user_id> <level>\n"
                "–£—Ä–æ–≤–Ω–∏: admin, manager, user\n"
                "–ü—Ä–∏–º–µ—Ä: /demote_user 123456789 manager"
            )
            return
        
        try:
            target_user_id = int(context.args[0])
            new_level = context.args[1]
            
            if new_level not in ['admin', 'manager', 'user']:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: admin, manager, user")
                return
            
            target_user = await sync_to_async(BotUser.objects.get)(user_id=target_user_id)
            
            # –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–Ω–∏–∂–µ–Ω
            if target_user.level == 'main_admin':
                await update.message.reply_text("‚ùå –ì–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –Ω–µ–ª—å–∑—è –ø–æ–Ω–∏–∑–∏—Ç—å.")
                return
            
            old_level = target_user.level
            target_user.level = new_level
            target_user.promoted_by = await sync_to_async(BotUser.objects.get)(user_id=user.id)
            await sync_to_async(target_user.save)()
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self._clear_user_cache(target_user_id)
            
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.first_name or target_user.username} –ø–æ–Ω–∏–∂–µ–Ω!\n"
                f"–°—Ç–∞—Ä—ã–π —É—Ä–æ–≤–µ–Ω—å: {old_level}\n"
                f"–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {new_level}"
            )
            
        except BotUser.DoesNotExist:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def ban_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω—ã –∏ –≤—ã—à–µ)"""
        user = update.effective_user
        
        if not await self.check_admin_permissions(user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban_user <user_id> [–ø—Ä–∏—á–∏–Ω–∞]\n"
                "–ü—Ä–∏–º–µ—Ä: /ban_user 123456789 –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"
            )
            return
        
        try:
            target_user_id = int(context.args[0])
            reason = " ".join(context.args[1:]) if len(context.args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            
            target_user = await sync_to_async(BotUser.objects.get)(user_id=target_user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            admin_user = await sync_to_async(BotUser.objects.get)(user_id=user.id)
            if target_user.level == 'main_admin' and admin_user.level != 'main_admin':
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞.")
                return
            
            if target_user.level == 'admin' and admin_user.level != 'main_admin':
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞.")
                return
            
            target_user.is_banned = True
            await sync_to_async(target_user.save)()
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self._clear_user_cache(target_user_id)
            
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.first_name or target_user.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
            
        except BotUser.DoesNotExist:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def unban_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω—ã –∏ –≤—ã—à–µ)"""
        user = update.effective_user
        
        if not await self.check_admin_permissions(user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban_user <user_id>\n"
                "–ü—Ä–∏–º–µ—Ä: /unban_user 123456789"
            )
            return
        
        try:
            target_user_id = int(context.args[0])
            
            target_user = await sync_to_async(BotUser.objects.get)(user_id=target_user_id)
            target_user.is_banned = False
            await sync_to_async(target_user.save)()
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self._clear_user_cache(target_user_id)
            
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.first_name or target_user.username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!"
            )
            
        except BotUser.DoesNotExist:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def handle_group_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –≤ –≥—Ä—É–ø–ø–∞—Ö"""
        user = update.effective_user
        chat = update.effective_chat
        
        logger.info(f"Group command handler triggered. Chat ID: {chat.id}, Admin chat ID: {self.bot_settings.admin_chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω —á–∞—Ç–æ–º
        if str(chat.id) != self.bot_settings.admin_chat_id:
            logger.info(f"Chat {chat.id} is not admin chat. Skipping.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
        bot_user = await self.get_or_create_bot_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        is_admin = await self.check_admin_permissions(user.id)
        is_manager = await self.check_manager_permissions(user.id)
        is_main_admin = await self.check_main_admin_permissions(user.id)
        
        if not (is_admin or is_manager):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ –∞–¥–º–∏–Ω —á–∞—Ç–µ.")
            return
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        command = update.message.text.split()[0][1:]  # –£–±–∏—Ä–∞–µ–º / –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        
        logger.info(f"Processing command: /{command} from user {user.id}")
        
        if command == "start":
            await self.start_command(update, context)
        elif command == "status":
            await self.status_command(update, context)
        elif command == "users":
            await self.users_command(update, context)
        elif command == "payments":
            await self.payments_command(update, context)
        elif command == "kyc":
            await self.kyc_command(update, context)
        elif command == "create_promo":
            await self.create_promo_command(update, context)
        elif command == "list_promos":
            await self.list_promos_command(update, context)
        elif command == "promo_stats":
            await self.promo_stats_command(update, context)
        elif command == "promote_user" and is_main_admin:
            await self.promote_user_command(update, context)
        elif command == "demote_user" and is_main_admin:
            await self.demote_user_command(update, context)
        elif command == "ban_user" and is_admin:
            await self.ban_user_command(update, context)
        elif command == "unban_user" and is_admin:
            await self.unban_user_command(update, context)
        elif command == "set_manager_chat":
            await self.set_manager_chat_command(update, context)
        elif command == "show_settings":
            await self.show_settings_command(update, context)
        elif command == "test_notifications":
            await self.test_notifications_command(update, context)
        elif command == "get_user_id":
            await self.get_user_id_command(update, context)
        elif command == "list_bot_users":
            await self.list_bot_users_command(update, context)
        elif command == "user_detail":
            await self.user_detail_command(update, context)
        elif command == "delete_promo":
            await self.delete_promo_command(update, context)
        elif command == "view_promo":
            await self.view_promo_command(update, context)
        elif command == "help":
            await self.help_command(update, context)
        else:
            logger.warning(f"Unknown command: /{command} from user {user.id} in chat {chat.id}")
            await update.message.reply_text(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ /{command} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
    
    async def get_user_id_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Get user ID by username"""
        user = update.effective_user
        
        # Check permissions - only admins and managers
        is_manager = await self.check_manager_permissions(user.id)
        
        if not is_manager:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if not context.args:
            await update.message.reply_text(
                "üìã **–ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram**\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /get_user_id @username\n\n"
                "–ü—Ä–∏–º–µ—Ä: /get_user_id @example_user"
            )
            return
        
        username = context.args[0].lstrip('@')
        
        try:
            # Try to get user by username
            target_user = await self.bot.get_chat(f'@{username}')
            
            message = "üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**\n\n"
            message += f"üë§ –ò–º—è: {target_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            if target_user.last_name:
                message += f"üë§ –§–∞–º–∏–ª–∏—è: {target_user.last_name}\n"
            message += f"üÜî Telegram ID: `{target_user.id}`\n"
            if target_user.username:
                message += f"üë§ Username: @{target_user.username}\n"
            
            # Check if user is in database
            try:
                bot_user = await sync_to_async(BotUser.objects.get)(user_id=target_user.id)
                message += f"\nüìä **–°—Ç–∞—Ç—É—Å –≤ —Å–∏—Å—Ç–µ–º–µ:**\n"
                message += f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {bot_user.get_level_display()}\n"
                message += f"‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ –î–∞' if bot_user.is_active else '‚ùå –ù–µ—Ç'}\n"
                message += f"‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω: {'‚ùå –î–∞' if bot_user.is_banned else '‚úÖ –ù–µ—Ç'}\n"
                
                # Get linked user account
                if bot_user.linked_user_id:
                    linked_user = await sync_to_async(User.objects.get)(id=bot_user.linked_user_id)
                    message += f"\nüîó **–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:**\n"
                    message += f"‚Ä¢ Email: {linked_user.email}\n"
                    message += f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {linked_user.balance_neon} NC\n"
            except BotUser.DoesNotExist:
                message += f"\n‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞."
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å username.")
    
    async def list_bot_users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """List all bot users (admins and managers)"""
        user = update.effective_user
        
        # Check if admin chat - no permissions needed
        if str(update.message.chat.id) == str(self.bot_settings.admin_chat_id):
            pass  # Allow in admin chat
        elif not await self.check_admin_permissions(user.id):
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.")
            return
        
        try:
            # Get all bot users
            bot_users = await sync_to_async(list)(BotUser.objects.order_by('-created_at'))
            
            message = "üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞:**\n\n"
            
            if bot_users:
                for bot_user in bot_users:
                    status = "‚úÖ" if bot_user.is_active else "‚ùå"
                    banned = "üö´" if bot_user.is_banned else ""
                    message += f"{status} **{bot_user.first_name}** (@{bot_user.username})\n"
                    message += f"   üÜî ID: `{bot_user.user_id}`\n"
                    message += f"   üìä –£—Ä–æ–≤–µ–Ω—å: {bot_user.get_level_display()}\n"
                    message += f"   üö´ –ó–∞–±–∞–Ω–µ–Ω: {'–î–∞' if bot_user.is_banned else '–ù–µ—Ç'}\n\n"
            else:
                message += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error listing bot users: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def user_detail_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Get detailed information about a user"""
        user = update.effective_user
        
        # Check if admin chat
        if str(update.message.chat.id) != str(self.bot_settings.admin_chat_id):
            if not await self.check_admin_permissions(user.id):
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
        
        if not context.args:
            await update.message.reply_text(
                "üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_detail <user_id>\n\n"
                "–ü—Ä–∏–º–µ—Ä: /user_detail 123456789"
            )
            return
        
        try:
            user_id = context.args[0]
            
            # Get site user
            site_user = await sync_to_async(User.objects.get)(id=user_id)
            
            # Get bot user if exists
            try:
                bot_user = await sync_to_async(BotUser.objects.get)(user_id=site_user.telegram_id)
                bot_status = f"üì± Telegram: @{bot_user.username}\n–£—Ä–æ–≤–µ–Ω—å: {bot_user.get_level_display()}\n–ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if bot_user.is_active else '–ù–µ—Ç'}"
            except BotUser.DoesNotExist:
                bot_status = "üì± Telegram: –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
            
            # Get user stats
            from payments_new.models import Payment
            from django.db.models import Sum, Count
            
            total_deposits = await sync_to_async(
                Payment.objects.filter(user=site_user, type='DEPOSIT', status='COMPLETED').aggregate(total=Sum('amount'))
            )()
            total_withdrawals = await sync_to_async(
                Payment.objects.filter(user=site_user, type='WITHDRAWAL', status='COMPLETED').aggregate(total=Sum('amount'))
            )()
            
            deposit_count = await sync_to_async(Payment.objects.filter(user=site_user, type='DEPOSIT').count)()
            withdrawal_count = await sync_to_async(Payment.objects.filter(user=site_user, type='WITHDRAWAL').count)()
            
            message = f"""
üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**

**üë§ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ò–º—è: {site_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ Email: {site_user.email}
‚Ä¢ ID: {site_user.id}
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {site_user.date_joined.strftime('%d.%m.%Y %H:%M')}

**üí∞ –§–∏–Ω–∞–Ω—Å—ã:**
‚Ä¢ –ë–∞–ª–∞–Ω—Å: {site_user.balance_neon} NC
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ: {total_deposits.get('total', 0) or 0:.2f} NC
‚Ä¢ –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: {total_withdrawals.get('total', 0) or 0:.2f} NC

**üí≥ –°–¥–µ–ª–∫–∏:**
‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {deposit_count}
‚Ä¢ –í—ã–≤–æ–¥–æ–≤: {withdrawal_count}

**üì± {bot_status}**

**üîê –°—Ç–∞—Ç—É—Å:**
‚Ä¢ KYC: {site_user.kyc_status if hasattr(site_user, 'kyc_status') else 'N/A'}
‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if site_user.is_active else '–ù–µ—Ç'}
"""
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except User.DoesNotExist:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {context.args[0]} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            logger.error(f"Error getting user detail: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def delete_promo_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Delete a promo code"""
        user = update.effective_user
        
        # Check if admin chat
        if str(update.message.chat.id) != str(self.bot_settings.admin_chat_id):
            if not await self.check_admin_permissions(user.id):
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã.")
                return
        
        if not context.args:
            await update.message.reply_text(
                "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞**\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_promo <–∫–æ–¥>\n\n"
                "–ü—Ä–∏–º–µ—Ä: /delete_promo WELCOME2024"
            )
            return
        
        try:
            promo_code = context.args[0].upper()
            
            # Get and delete promo code
            promo = await sync_to_async(PromoCode.objects.get)(code=promo_code)
            promo.delete()
            
            await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{promo_code}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            
        except PromoCode.DoesNotExist:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ '{context.args[0]}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            logger.error(f"Error deleting promo: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def view_promo_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """View detailed information about a promo code"""
        user = update.effective_user
        
        # Check if admin chat
        if str(update.message.chat.id) != str(self.bot_settings.admin_chat_id):
            if not await self.check_admin_permissions(user.id):
                await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã.")
                return
        
        if not context.args:
            await update.message.reply_text(
                "üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ**\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /view_promo <–∫–æ–¥>\n\n"
                "–ü—Ä–∏–º–µ—Ä: /view_promo WELCOME2024"
            )
            return
        
        try:
            promo_code = context.args[0].upper()
            
            # Get promo code
            promo = await sync_to_async(PromoCode.objects.get)(code=promo_code)
            
            # Get redemption stats
            from promo.models import PromoRedemption
            redemption_count = await sync_to_async(PromoRedemption.objects.filter(promo_code=promo).count)()
            
            message = f"""
üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ**

**üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ö–æ–¥: {promo.code}
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {promo.name}
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {promo.description}
‚Ä¢ –¢–∏–ø: {promo.get_promo_type_display()}

**üí∞ –§–∏–Ω–∞–Ω—Å—ã:**
‚Ä¢ –ë–æ–Ω—É—Å: {promo.bonus_amount} NC
‚Ä¢ –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {redemption_count}/{promo.max_uses or '‚àû'}

**üìä –°—Ç–∞—Ç—É—Å:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {promo.get_status_display()}
‚Ä¢ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {promo.expires_at.strftime('%d.%m.%Y %H:%M') if promo.expires_at else '–ë–µ—Å—Å—Ä–æ—á–Ω–æ'}

**üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å:**
‚Ä¢ {promo.created_by.username if promo.created_by else '–°–∏—Å—Ç–µ–º–∞'}
‚Ä¢ {promo.created_at.strftime('%d.%m.%Y %H:%M')}
"""
            
            await update.message.reply_text(message, parse_mode='Markdown')
            
        except PromoCode.DoesNotExist:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ '{context.args[0]}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            logger.error(f"Error viewing promo: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    def run(self):
        """Run the bot with optimized settings"""
        logger.info("üöÄ Starting NeonCasino Telegram Bot...")
        logger.info(f"üì± Admin Chat ID: {self.bot_settings.admin_chat_id}")
        logger.info(f"üîë Bot Token: {self.bot_settings.bot_token[:10]}...")
        logger.info(f"‚ö° Cache enabled with timeout: {CACHE_TIMEOUT}s")
        logger.info(f"üë• User cache timeout: {USER_CACHE_TIMEOUT}s")
        
        try:
            self.application.run_polling(
                poll_interval=1.0,  # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞
                timeout=30,  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
                drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                allowed_updates=['message', 'callback_query']  # –¢–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            )
        except KeyboardInterrupt:
            logger.info("üõë Bot stopped by user")
        except Exception as e:
            logger.error(f"‚ùå Bot crashed: {e}")
            raise

if __name__ == "__main__":
    bot = NeonCasinoBot()
    bot.run()










